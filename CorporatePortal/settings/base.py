"""
Django settings for CorporatePortal project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from datetime import datetime, timedelta
from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

log_filepath = os.path.join(BASE_DIR, 'log')
if not os.path.exists(log_filepath):
    os.makedirs(log_filepath)
else:
    if datetime.now().weekday() == 0:
        log_filename = datetime.now().strftime("%Y_%m_%d") + ".log"
        viewlog_filename = datetime.now().strftime("%Y_%m_%d") + "_view.log"
    else:
        monday = datetime.now() - timedelta(days = datetime.now().weekday())
        log_filename = monday.strftime("%Y_%m_%d") + ".log"
        viewlog_filename = monday.strftime("%Y_%m_%d") + "_view.log"

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'loggers':{
        '':{
            'handlers':['console','file'],
            'propagate':False,
        },
        'viewsLogger':{
            'handlers':['console','fileViews'],
            'propagate':False,
        }
    },
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{asctime} {levelname} {message}',
            'style': '{',
        },
        'viewsFormat': {
            'format': '{asctime} | {levelname} | {message} | {funcName} | USER_ID: {username}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'class': 'logging.FileHandler',
            'filename': os.path.join(log_filepath, log_filename),
            'formatter': 'simple'
        },
        'fileViews': {
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'class': 'logging.FileHandler',
            'filename': os.path.join(log_filepath, viewlog_filename),
            'formatter': 'viewsFormat'
        },
    },
    'root': {
        'handlers': ['file'],
        'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
    },
}
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_)gpvc6_lnh_&t!t*1g00%u16@1fexlaee$d_-$rsy^yf2d%(4'

AUTH_USER_MODEL = 'Portal.CorporateUser'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'sequences.apps.SequencesConfig',
    'Portal',
    'widget_tweaks'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'CorporatePortal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'CorporatePortal.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kuala_Lumpur'

USE_I18N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

# STATIC_ROOT = './static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = ['Portal.backends.EmailBackend']

# Email Host settings for reset/change password module
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # During development only
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_USE_TLS = True
# EMAIL_PORT = 587
# EMAIL_HOST_USER = 'medixtest123@gmail.com'
# EMAIL_HOST_PASSWORD = 'qkdlqsqaepphzddk'

X_FRAME_OPTIONS = 'SAMEORIGIN'

MANDATORY_MESSAGE = 'Please fill in all the mandatory fields (*).'
COVERAGE_MANDATORY_MESSAGE = 'Please fill in atleast one (1) coverage product amount.'
MEMBER_EXISTING_MESSAGE = 'Upload member has already existed.'
DATE_FORMAT_MESSAGE = 'Please fill in date(s) in these formats: dd-mm-yyyy, dd/mm/yyyy, yyyy-mm-dd, yyyy/mm/dd.'
CONNECTION_LOST_MESSAGE = 'Connection Lost!'
ACCIDENT_COVERAGE_MESSAGE = 'Accident coverage should not exceed death coverage.'
MEDICAL_COVERAGE_MESSAGE = 'Medical coverage should follow the available coverage amounts.'
SAME_FILENAME_MESSAGE = 'File with same name has been uploaded.'
AGE_LIMIT_MESSAGE = 'This member has exceeded the age limit for {PRODUCT} coverage.'
MEDICAL_EXISTING_MESSAGE = 'This prospect already has a medical coverage.'
COVERAGE_LIMIT_MESSAGE = 'Limit exceeded for coverage(s).'
MINIMUM_COVERAGE_MESSAGE = 'Minimum coverage unmet for {PRODUCT} coverage.'
UNDER_SPONSORED_INSURANCE = '{INSURED_NAME} is currently insured with DearTime. You may offer to pay for {GENDER} again from {NEXT_RENEWAL_DATE} when {GENDER2} current coverage falls due.'
EMAIL_MOBILE_EXISTING_MESSAGE = 'Email address or mobile number or nric has already existed.'
NRIC_DOB_NOTVALID_MESSAGE = 'Please fill in a valid nric.'
COVERAGE_SHOULD_BE_INT = 'Please enter integer only in coverage section.'
MOBILE_SHOULD_BE_INT = 'Please enter integer only for mobile number.'

EMAIL_BACKEND = 'django_ses.SESBackend'

# Deartime Credentials
AWS_ACCESS_KEY_ID = 'AKIA3XIY5XGSAZMX7OFZ'
AWS_SECRET_ACCESS_KEY = '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'
DEFAULT_FROM_EMAIL = 'no-reply@deartime.com'
